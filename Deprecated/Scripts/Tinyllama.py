# -*- coding: utf-8 -*-
"""TinyLLama (2).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SigCFxNP4gpvHGi_cFA-s7tbn8kGkanA
"""

!pip install -U transformers

pip install transformers==4.36.2 accelerate torch

pip install sentencepiece

from transformers import AutoTokenizer, AutoModelForCausalLM
import torch

MODEL_ID = "TinyLlama/TinyLlama-1.1B-Chat-v1.0"  # Open, chat-tuned TinyLlama[1]

# Load tokenizer and model
tokenizer = AutoTokenizer.from_pretrained(MODEL_ID)
model = AutoModelForCausalLM.from_pretrained(
    MODEL_ID,
    torch_dtype=torch.bfloat16 if torch.cuda.is_available() else torch.float32,
    device_map="auto"
)

# Helper: generate with chat messages using TinyLlama's chat template
def chat_generate(messages, max_new_tokens=256, temperature=0.7, top_p=0.95, top_k=50, repetition_penalty=1.1):
    prompt = tokenizer.apply_chat_template(messages, tokenize=False, add_generation_prompt=True)  # per TinyLlama docs[1][6]
    inputs = tokenizer(prompt, return_tensors="pt")
    inputs = {k: v.to(model.device) for k, v in inputs.items()}
    output_ids = model.generate(
        **inputs,
        max_new_tokens=max_new_tokens,
        do_sample=True,
        temperature=temperature,
        top_p=top_p,
        top_k=top_k,
        repetition_penalty=repetition_penalty,
        eos_token_id=tokenizer.eos_token_id,
        pad_token_id=tokenizer.eos_token_id
    )
    return tokenizer.decode(output_ids[0], skip_special_tokens=True)

def generate_poem(prompt_text="Write me a poem about Machine Learning."):
    messages = [
        {"role": "system", "content": "You are a helpful, creative assistant."},
        {"role": "user", "content": prompt_text}
    ]
    return chat_generate(messages, max_new_tokens=200)

print(generate_poem("Write me a poem about Machine Learning."))

# 2) AI-content detection: Instructional prompt (first version)
instruction_prompt_v1 = (
    "You are a content detection expert.\n"
    "Your task is to determine whether the following student-written paragraph is generated by an AI or a human.\n"
    "Be honest, unbiased, and give a reason for your decision.\n\n"
    "Student Paragraph:\n"
    "\"\"\"\n"
    "{}\n"
    "\"\"\"\n\n"
    "Your Analysis:"
)

def detect_ai_content_instructional_v1(student_paragraph):
    user_text = instruction_prompt_v1.format(student_paragraph)
    messages = [
        {"role": "system", "content": "You are a rigorous content detection expert."},
        {"role": "user", "content": user_text}
    ]
    return chat_generate(messages, max_new_tokens=250)

student_input_1 = "Machine learning allows systems to learn from data and make predictions without being explicitly programmed."
print(detect_ai_content_instructional_v1(student_input_1))

student_input_1 = "Machine learning enables computers to learn from data and improve performance without explicit programming."
print(detect_ai_content_instructional_v1(student_input_1))

student_input_1 = "Machine learning is being used by many fields around the globe, such as in major field like medical."
print(detect_ai_content_instructional_v1(student_input_1))

# 3) AI-content detection: Structured, step-by-step rubric (second version)
instruction_prompt_v2 = (
    "You are a content detection expert specialized in identifying AI-generated writing.\n"
    "Your task is to determine whether the following student-written paragraph is generated by an AI or a human.\n\n"
    "Follow these guidelines:\n"
    "1. Be honest, unbiased, and support your decision with reasoning.\n"
    "2. Analyze the paragraph based on the following dimensions:\n"
    "   - Writing Style: Assess natural flow, consistency, and tone.\n"
    "   - Language Complexity: Look for vocabulary depth, sentence variation, and abstraction.\n"
    "   - Logical Flow: Examine coherence, transitions, and clarity.\n"
    "   - Originality: Is the content specific and insightful or vague and generic?\n"
    "   - Emotional Tone: Consider empathy, nuance, or personal perspective.\n"
    "   - Red Flags: Repetition, unnatural phrasing, overuse of buzzwords, lack of specifics.\n"
    "3. Use critical thinking and forensic linguistic skills.\n"
    "4. Clearly conclude: Was it written by a Human or AI?\n\n"
    "Student Paragraph:\n"
    "\"\"\"\n"
    "{}\n"
    "\"\"\"\n\n"
    "Step-by-Step Analysis:\n"
    "- Writing Style:\n"
    "- Language Complexity:\n"
    "- Logical Flow:\n"
    "- Originality:\n"
    "- Emotional Tone:\n"
    "- Red Flags:\n\n"
    "Final Verdict (Human or AI) and Explanation:"
)

def detect_ai_content_instructional_v2(student_paragraph):
    user_text = instruction_prompt_v2.format(student_paragraph)
    messages = [
        {"role": "system", "content": "You are a rigorous content detection expert who follows instructions precisely."},
        {"role": "user", "content": user_text}
    ]
    return chat_generate(messages, max_new_tokens=300)

student_input_2 = (
    "I still remember the first time I used an AI tool, it was amazing, but also a little weird. "
    "It felt nice to have help from a machine, but it made me think about how we think. "
    "Maybe the real question is not what AI can do, but what we might stop doing ourselves."
)
print(detect_ai_content_instructional_v2(student_input_2))

